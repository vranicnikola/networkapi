#pragma once

#include "CircularBuffer.h"

enum{
	NM_NO_ID,
	
	NM_OPEN1_REQUEST, NM_OPEN1_DONE, NM_OPEN1_FAILD,
	NM_OPEN2_REQUEST, NM_OPEN2_DONE, NM_OPEN2_FAILD,
	NM_OPEN3_REQUEST, NM_OPEN3_DONE, NM_OPEN3_FAILD,
	NM_OPEN4_REQUEST, NM_OPEN4_DONE, NM_OPEN4_FAILD,
	NM_OPEN5_REQUEST, NM_OPEN5_DONE, NM_OPEN5_FAILD,
	NM_OPEN6_REQUEST, NM_OPEN6_DONE, NM_OPEN6_FAILD,
	NM_OPEN7_REQUEST, NM_OPEN7_DONE, NM_OPEN7_FAILD,
	NM_OPEN8_REQUEST, NM_OPEN8_DONE, NM_OPEN8_FAILD,
	NM_OPEN9_REQUEST, NM_OPEN9_DONE, NM_OPEN9_FAILD,
	NM_OPEN10_REQUEST, NM_OPEN10_DONE, NM_OPEN10_FAILD,
	NM_OPEN11_REQUEST, NM_OPEN11_DONE, NM_OPEN11_FAILD,
	NM_OPEN12_REQUEST, NM_OPEN12_DONE, NM_OPEN12_FAILD,
	NM_OPEN13_REQUEST, NM_OPEN13_DONE, NM_OPEN13_FAILD,
	NM_OPEN14_REQUEST, NM_OPEN14_DONE, NM_OPEN14_FAILD,
	NM_OPEN15_REQUEST, NM_OPEN15_DONE, NM_OPEN15_FAILD,
	NM_OPEN16_REQUEST, NM_OPEN16_DONE, NM_OPEN16_FAILD,
	NM_OPEN17_REQUEST, NM_OPEN17_DONE, NM_OPEN17_FAILD,

	NM_CLOSE1_REQUEST, NM_CLOSE1_DONE, NM_CLOSE1_FAILD,
	NM_CLOSE2_REQUEST, NM_CLOSE2_DONE, NM_CLOSE2_FAILD,
	NM_CLOSE3_REQUEST, NM_CLOSE3_DONE, NM_CLOSE3_FAILD,
	NM_CLOSE4_REQUEST, NM_CLOSE4_DONE, NM_CLOSE4_FAILD,
	NM_CLOSE5_REQUEST, NM_CLOSE5_DONE, NM_CLOSE5_FAILD,
	NM_CLOSE6_REQUEST, NM_CLOSE6_DONE, NM_CLOSE6_FAILD,
	NM_CLOSE7_REQUEST, NM_CLOSE7_DONE, NM_CLOSE7_FAILD,
	NM_CLOSE8_REQUEST, NM_CLOSE8_DONE, NM_CLOSE8_FAILD,
	NM_CLOSE9_REQUEST, NM_CLOSE9_DONE, NM_CLOSE9_FAILD,
	NM_CLOSE10_REQUEST, NM_CLOSE10_DONE, NM_CLOSE10_FAILD,
	NM_CLOSE11_REQUEST, NM_CLOSE11_DONE, NM_CLOSE11_FAILD,
	NM_CLOSE12_REQUEST, NM_CLOSE12_DONE, NM_CLOSE12_FAILD,
	NM_CLOSE13_REQUEST, NM_CLOSE13_DONE, NM_CLOSE13_FAILD,
	NM_CLOSE14_REQUEST, NM_CLOSE14_DONE, NM_CLOSE14_FAILD,
	NM_CLOSE15_REQUEST, NM_CLOSE15_DONE, NM_CLOSE15_FAILD,
	NM_CLOSE16_REQUEST, NM_CLOSE16_DONE, NM_CLOSE16_FAILD,
	NM_CLOSE17_REQUEST, NM_CLOSE17_DONE, NM_CLOSE17_FAILD,
};

typedef struct networkApiMessage{
	
	unsigned int messageId;

	unsigned int uiDataSize;

	unsigned char * pucData;

	networkApiMessage(){
		uiDataSize = 0;
		pucData = 0;
	}
}NetworkApiMessage;

class NetworkMessage{

public:
	NetworkMessage();

	NetworkMessage(unsigned int uiID,  unsigned int uiSize, unsigned char * pucData);

	NetworkMessage(CircularBuffer * circularBuffer);

	~NetworkMessage();

	bool isConstructorComplete();

	unsigned int getMessageID();

	unsigned int getMessageSize();

	unsigned char * getData();

private:
	NetworkApiMessage networkApiMessage;

	bool bConstructorComplete;

};
